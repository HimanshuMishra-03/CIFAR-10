<<<<<<< HEAD
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[codz]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
.pixi

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/
=======
# .gitignore for a project containing Python, Node.js and React (includes common OS/IDE files)

# ====================
# OS / system files
# ====================
.DS_Store
Thumbs.db
desktop.ini
$RECYCLE.BIN/

# ====================
# IDEs / editors
# ====================
.vscode/
.idea/
*.sublime-workspace
*.sublime-project
*.code-workspace

# ====================
# Node / JavaScript
# ====================
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
package-lock.json.log
lerna-debug.log*

# build/dist outputs (React, Vite, CRA, Next, Gatsby, Nuxt, etc.)
dist/
build/
public/build/
.next/
.nuxt/
.cache/
.parcel-cache/
.out/
.astro/dist/
*.localbuild/

# bundler / cache
.cache/
.eslintcache
/.turbo/

# static generated folders (Gatsby)
.cache/
public/

# dependency directories
.pnp/
.pnp.js

# Environment files (do not commit secrets)
.env
.env.*
!.env.example

# Misc JS artifacts
*.tgz
*.log

# ====================
# React / Create React App / frameworks
# ====================
# Create React App build output
/build/

# Next.js
.next/
.next/cache

# Vite
dist/

# Gatsby
.cache/
public/

# ====================
# Python
# ====================
# Byte-compiled / optimized files
__pycache__/
*.py[cod]
*$py.class

# Virtual environments
venv/
ENV/
env/
.venv/
.ENV/
env.bak/
venv.bak/

# pip / wheel
pip-wheel-metadata/
*.egg
*.egg-info/
dist/
build/

# Installer logs, test reports, coverage
htmlcov/
.coverage
.coverage.*
.coverage.*.sqlite
.tox/
.nox/
.pytest_cache/
pytestdebug.log
coverage.xml
nosetests.xml
test-reports/

# Type checkers and caches
.mypy_cache/
.pyre/
.ruff_cache/
.scipilot/
# Bytecode/compiled extensions
*.so

# Django / Flask / other runtime artifacts
*.sqlite3
*.db
instance/
.webassets-cache

# Environment / secrets
.env
.env.*
secrets.yml
credentials.yml

# ====================
# Python packaging
# ====================
# Distribution / packaging
*.egg
*.egg-info/
dist/
build/
eggs/

# ====================
# Misc / logs / temp
# ====================
*.log
logs/
*.tmp
tmp/
temp/
*.cache

# ====================
# Docker
# ====================
docker-compose.override.yml
**/docker-compose.override.yml
docker-compose.*.yml
# Optional: ignore local .env for docker
.env.docker

# ====================
# Other common files to ignore
# ====================
.vagrant/
.idea/
*.iml
*.class

# Keep sample config files in source control by using *.example or !exceptions above
>>>>>>> 17bca5b (First Commit)
# .gitignore
*.h5
*.hdf5
*.ckpt
